From fdf70cce16dadf3c8bf203e19bf885f48ef0ee59 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Henrik=20S=2E=20Ga=C3=9Fmann?= <henrik.gassmann@adesso.de>
Date: Mon, 23 May 2022 13:37:15 +0200
Subject: [PATCH] Require cmake version 3.10.2

---
 CMakeLists.txt | 25 ++++++++++---------------
 1 file changed, 10 insertions(+), 15 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 16c732b..28c8ee7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,14 +10,14 @@
 #     http://creativecommons.org/publicdomain/zero/1.0/
 #
 ########################################################################
-cmake_minimum_required(VERSION 3.1)
+cmake_minimum_required(VERSION 3.10.2)
 
-project(base64 LANGUAGES C VERSION 0.4.0)
+# new dependent option syntax. We are already compliant
+if (POLICY CMP0127)
+    cmake_policy(SET CMP0127 NEW) 
+endif()
 
-cmake_policy(SET CMP0082 NEW)
-cmake_policy(SET CMP0060 NEW)
-cmake_policy(SET CMP0065 NEW)
-cmake_policy(SET CMP0127 NEW)
+project(base64 LANGUAGES C VERSION 0.4.0)
 
 include(GNUInstallDirs)
 include(CMakeDependentOption)
@@ -47,7 +47,7 @@ cmake_dependent_option(BASE64_WITH_OpenMP "use OpenMP" OFF "OpenMP_FOUND" OFF)
 add_feature_info("OpenMP codec" BASE64_WITH_OpenMP "spreads codec work accross multiple threads")
 cmake_dependent_option(BASE64_REGENERATE_TABLES "regenerate the codec tables" OFF "NOT CMAKE_CROSSCOMPILING" OFF)
 
-set(_IS_X86 "\"${_TARGET_ARCH}\" STREQUAL \"x86\" OR \"${_TARGET_ARCH}\" STREQUAL \"x64\"")
+set(_IS_X86 "_TARGET_ARCH STREQUAL \"x86\" OR _TARGET_ARCH STREQUAL \"x64\"")
 cmake_dependent_option(BASE64_WITH_SSSE3 "add SSSE 3 codepath" ON ${_IS_X86} OFF)
 add_feature_info(SSSE3 BASE64_WITH_SSSE3 "add SSSE 3 codepath")
 cmake_dependent_option(BASE64_WITH_SSE41 "add SSE 4.1 codepath" ON ${_IS_X86} OFF)
@@ -59,11 +59,11 @@ add_feature_info(AVX BASE64_WITH_AVX "add AVX codepath")
 cmake_dependent_option(BASE64_WITH_AVX2 "add AVX 2 codepath" ON ${_IS_X86} OFF)
 add_feature_info(AVX2 BASE64_WITH_AVX2 "add AVX2 codepath")
 
-set(_IS_ARM "\"${_TARGET_ARCH}\" STREQUAL \"arm\"")
+set(_IS_ARM "_TARGET_ARCH STREQUAL \"arm\"")
 cmake_dependent_option(BASE64_WITH_NEON32 "add NEON32 codepath" OFF ${_IS_ARM} OFF)
 add_feature_info(NEON32 BASE64_WITH_NEON32 "add NEON32 codepath")
 
-set(_IS_ARM64 "\"${_TARGET_ARCH}\" STREQUAL \"arm64\"")
+set(_IS_ARM64 "_TARGET_ARCH STREQUAL \"arm64\"")
 cmake_dependent_option(BASE64_WITH_NEON64 "add NEON64 codepath" ON ${_IS_ARM64} OFF)
 add_feature_info(NEON64 BASE64_WITH_NEON64 "add NEON64 codepath")
 
@@ -186,7 +186,6 @@ define_SIMD_compile_flags()
 if (_TARGET_ARCH STREQUAL "x86" OR _TARGET_ARCH STREQUAL "x64")
     macro(configure_codec _TYPE)
         if (BASE64_WITH_${_TYPE})
-            message(STATUS "Add codec: lib/arch/${_DIR}/codec.c")
             string(TOLOWER "${_TYPE}" _DIR)
             set_source_files_properties("lib/arch/${_DIR}/codec.c" PROPERTIES
                 COMPILE_FLAGS "${COMPILE_FLAGS_${_TYPE}}"
@@ -225,11 +224,7 @@ configure_file("${CMAKE_CURRENT_LIST_DIR}/cmake/config.h.in" "${CMAKE_CURRENT_BI
 ########################################################################
 # OpenMP Settings
 if (BASE64_WITH_OpenMP)
-    target_compile_options(base64
-        PRIVATE
-            ${OpenMP_C_FLAGS}
-    )
-    target_link_libraries(base64 OpenMP::OpenMP_C)
+    target_link_libraries(base64 PRIVATE OpenMP::OpenMP_C)
 endif()
 
 ########################################################################
-- 
2.34.1

